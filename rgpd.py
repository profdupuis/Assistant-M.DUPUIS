import os
import hashlib
import json
from datetime import datetime, timedelta, timezone
from flask import flash, send_file, redirect, url_for, Response, send_from_directory, session, jsonify, request
import csv
from io import StringIO
from sqlalchemy import text
from io import BytesIO
from zipfile import ZipFile, ZIP_DEFLATED

from utils.session_utils import init_session_context

"""
üîê Module de Gestion RGPD & WORM - rgpd.py

Ce module g√®re toutes les op√©rations critiques RGPD du projet :
- Export et archivage WORM scell√©
- Purge des logs anciens et anonymisation des r√©ponses
- Suppression d'√©l√®ves RGPD
- Gestion du consentement explicite des √©l√®ves
- V√©rification de la continuit√© du cha√Ænage WORM (prev_hash ‚ûî this_hash)
- G√©n√©ration syst√©matique de rapports texte horodat√©s et scell√©s SHA256
- Organisation rigoureuse des rapports dans /export/audit_reports/

Fonctionnalit√©s principales :
- G√©n√©ration automatique de fichiers TXT pour chaque action RGPD.
- Ajout du hash SHA256 du contenu directement √† la fin du rapport.
- Cr√©ation automatique de fichier .sha256 pour validation externe.
- Archivage organis√© par sous-dossier :
    - consentements/
    - integrite_worm/
    - purges/
    - moderations/
    - Deleted_students/

Objectif :
- Assurer une tra√ßabilit√© compl√®te et v√©rifiable des actions sensibles.
- √ätre conforme aux exigences RGPD, CNIL, et aux standards WORM (Write Once, Read Many).
"""



WORM_EXPORT_DAYS = 7  # Export worm tous les logs de moins de WORM_EXPORT_DAYS jours
PURGE_DAYS = 15



# üìÅ Initialisation des dossiers

EXPORT_DIR = "export"
worm_dir = os.path.join(EXPORT_DIR, "worm")
audit_packs_dir = os.path.join(EXPORT_DIR, "audit_packs")
audit_reports_dir = os.path.join(EXPORT_DIR, "audit_reports")
temp_dir = os.path.join(EXPORT_DIR, "temp")

def init_export_directories():
    """
    V√©rifie que les sous-dossiers de /export existent et les cr√©e si besoin.
    """
    subfolders = ["worm", "audit_packs", "audit_reports", "temp"]

    for folder in subfolders:
        path = os.path.join(EXPORT_DIR, folder)
        os.makedirs(path, exist_ok=True)


# üßπ Nettoyage des anciens fichiers

def clean_export_folder():
    """
    Nettoie les fichiers des dossiers export d√©passant leur date de conservation.
    """
    now = datetime.now(timezone.utc)
    folders = {
        "worm": 365,
        "audit_packs": 365,
        "audit_reports": 365,
        "temp": 90
    }

    for subfolder, retention_days in folders.items():
        path = os.path.join(EXPORT_DIR, subfolder)
        if not os.path.exists(path):
            continue
        
        cutoff = now - timedelta(days=retention_days)
        for filename in os.listdir(path):
            filepath = os.path.join(path, filename)
            if os.path.isfile(filepath):
                file_mtime = datetime.fromtimestamp(os.path.getmtime(filepath), tz=timezone.utc)
                if file_mtime < cutoff:
                    try:
                        os.remove(filepath)
                    except Exception as e:
                        print(f"Erreur suppression fichier {filepath}: {e}")


def generate_sha256(filepath):
    """
    G√©n√®re un fichier .sha256 √† partir du fichier donn√©.
    
    Le fichier SHA256 est cr√©√© dans le m√™me dossier que le fichier d'origine,
    avec un contenu au format : [hash]  [nom_fichier]
    """
    sha_path = filepath + ".sha256"
    with open(filepath, "rb") as f:
        contenu = f.read()
    hash_value = hashlib.sha256(contenu).hexdigest()

    with open(sha_path, "w", encoding="utf-8") as f:
        f.write(f"{hash_value}  {os.path.basename(filepath)}\n")


def generate_report_sha256(filename, lines, subfolder=None):
    """
    G√©n√®re un rapport texte dans /export/audit_reports/subfolder/ et :
    - Ajoute le hash SHA256 du contenu directement en fin de fichier.
    - Cr√©e aussi un fichier .sha256 associ√©.

    Param√®tres :
    - filename : nom du fichier sans chemin (ex: 'rapport_delete_...')
    - lines : liste des lignes de texte √† √©crire
    - subfolder : sous-dossier facultatif (ex: 'consentements')

    Retour :
    - Chemin complet du fichier g√©n√©r√©
    """
    base_dir = audit_reports_dir # tous les report sont dans ce dossier
    if subfolder:
        base_dir = os.path.join(audit_reports_dir, subfolder)
        os.makedirs(base_dir, exist_ok=True)
        
    report_path = os.path.join(base_dir, filename)

    # √âcrire le fichier .txt
    with open(report_path, "w", encoding="utf-8") as f:
        for line in lines:
            f.write(line + "\n")
            
    # Lire le contenu brut
    with open(report_path, "rb") as f:
        contenu = f.read()
    hash_value = hashlib.sha256(contenu).hexdigest()

    # R√©√©crire en ajoutant le hash scell√©
    with open(report_path, "a", encoding="utf-8") as f:
        f.write("\n---\n")
        f.write(f"Hash SHA256 du contenu du rapport : {hash_value}\n")
        
    # G√©n√©rer automatiquement le .sha256
    generate_sha256(report_path)

    return report_path



# Conssentement RGPD √† la signature (premier login et initialisation du hash)
def handle_consent(engine):
    """
    G√®re l'acceptation du consentement RGPD par l'√©l√®ve lors de la connexion.

    Fonctionnement :
    - V√©rifie si l'√©l√®ve a coch√© la case de consentement RGPD.
    - Si oui :
        - Enregistre la date du consentement dans la base (`students.rgpd_consent_date`).
        - G√©n√®re un premier `last_this_hash` pour initialiser le cha√Ænage RGPD.
        - Enregistre le consentement dans un rapport scell√© sha 256 avec le first hash stock√© dans /audit_reports/consentements/
        - Met √† jour la session avec l'identifiant de l'√©l√®ve.
        - Redirige vers l'interface IA apr√®s consentement.
    - Si non :
        - Vide la session.
        - Redirige vers la page de login.

    Param√®tres :
    - engine : SQLAlchemy Engine connect√© √† la base de donn√©es principale.

    S√©curit√© :
    - Ne modifie rien sans consentement explicite.
    - Nettoie syst√©matiquement la session pour √©viter tout contournement.

    Retour :
    - Redirige vers `/ia` si le consentement est valid√©.
    - Redirige vers `/login` si l'acceptation √©choue ou manque.
    """
    sid = session.get("student_id")  # R√©cup√®re l'identifiant de l'√©l√®ve
    consent_given = request.form.get("consent")  # V√©rifier si la case de consentement est coch√©e

    if consent_given and sid:  # V√©rifier que l'ID et le consentement sont pr√©sents
        try:
            # Si consentement donn√©, on enregistre la date du consentement
            now = datetime.now(timezone.utc)

            # üÜï G√©n√©rer un premier last_this_hash
            first_hash = hashlib.sha256(f"{sid}{now.isoformat()}".encode()).hexdigest()

            with engine.begin() as cn:
                result = cn.execute(text("""
                    UPDATE students
                    SET rgpd_consent_date = :now,
                        last_this_hash = :first_hash
                    WHERE student_id = :sid
                """), {"now": now, "first_hash": first_hash, "sid": sid})
                
            if result.rowcount == 1:
                # generation rapport sha256
                now = datetime.now(timezone.utc)
                now_str = now.strftime("%Y-%m-%d_%H-%M-%S")
                filename = f"rapport_consentement_{sid}_{now_str}.txt"

                lines = [
                    f"Date de consentement : {now.strftime('%Y-%m-%d %H:%M UTC')}",
                    f"√âl√®ve : {sid}",
                    f"Premier hash RGPD : {first_hash}"
                ]

                generate_report_sha256(filename, lines,  subfolder="consentements")

                print(f"Consentement RGPD enregistr√© pour {sid}")
            else:
                print(f"Aucun √©l√®ve trouv√© pour {sid} lors du consentement RGPD")

            # ‚úÖ Pr√©parer la session correctement
            session.clear()
            session["student_id"] = sid
            init_session_context(engine, sid)
            return redirect(url_for("interface_ia"))
        except Exception as e:
            # En cas d'erreur lors de l'enregistrement
            print(f"Erreur lors de l'enregistrement du consentement pour {sid}: {e}")
            return jsonify({"error": "Erreur lors de l'enregistrement. Veuillez r√©essayer."}), 500
    else:
        # Si le consentement n'est pas donn√©, d√©connexion et retour √† la page de login
        session.clear()  # Vider la session pour √©viter toute tentative de contournement
        return redirect(url_for("login"))



# üîç V√©rification int√©grit√© WORM

def verifier_integrite_worm(engine, generate_report=True):
    """
    V√©rifie la continuit√© du cha√Ænage prev_hash / this_hash dans chat_logs.
    G√©n√®re un rapport uniquement en cas d'anomalies nouvelles depuis le dernier rapport existant.
    Enregistre un rapport scell√© sha 256
    Les rapports sont stock√©s dans /audit_reports/integrite_worm/
    """
    with engine.connect() as cn:
        logs = cn.execute(text("""
            SELECT user_id, ts, prev_hash, this_hash
            FROM chat_logs
            ORDER  BY user_id ASC, ts ASC     -- üîë  reset automatique
        """)).mappings().all()

    previous_user = None
    previous_this_hash = None
    anomalies = []

    for log in logs:
        # on change d'√©l√®ve ‚Üí on remet les compteurs √† z√©ro
        if log["user_id"] != previous_user:
            previous_user = log["user_id"]
            previous_this_hash = None

        if previous_this_hash and log["prev_hash"] != previous_this_hash:
            anomalies.append((
                log["ts"], log["user_id"],
                previous_this_hash, log["prev_hash"]
            ))

        previous_this_hash = log["this_hash"]

    if anomalies and generate_report:
        # Trouver la date du dernier rapport WORM existant par recherche dans le sous-dossier integrite_worm
        
        integrite_dir = os.path.join(audit_reports_dir, "integrite_worm")
        os.makedirs(integrite_dir, exist_ok=True)  # au cas o√π le dossier n'existe pas encore
        
        existing_reports = [f for f in os.listdir(integrite_dir) if f.startswith("rapport_integrite_WORM_") and f.endswith(".txt")]
        existing_reports = sorted(existing_reports, reverse=True)

        latest_report_time = None
        if existing_reports:
            latest_report = existing_reports[0]
            try:
                # Extraire la date depuis le nom du fichier et la mettre en UTC
                date_str = latest_report.replace("rapport_integrite_WORM_", "").replace(".txt", "")
                latest_report_time = datetime.strptime(date_str, "%Y-%m-%d_%H-%M-%S").replace(tzinfo=timezone.utc)
            except Exception as e:
                print(f"Erreur lecture date dernier rapport WORM: {e}")

        # V√©rifier si une des anomalies est plus r√©cente que le dernier rapport
        need_new_report = True
        if latest_report_time:
            need_new_report = any(anomaly[0] > latest_report_time for anomaly in anomalies)

        if need_new_report:
            now_utc = datetime.now(timezone.utc)
            now_str = now_utc.strftime("%Y-%m-%d_%H-%M-%S")
            
            filename = f"rapport_integrite_WORM_{now_str}.txt"

            # ‚ú® Utiliser directement generate_report_sha256
            lines = [
                f"Date de v√©rification : {now_utc.strftime('%d/%m/%Y √† %H:%M UTC')}",
                f"Nombre d'anomalies d√©tect√©es : {len(anomalies)}",
                ""
            ]
            for ts, uid, prev_exp, prev_found in anomalies:
                lines.append(
                    f"[{ts}] √©l√®ve={uid} ‚Äì prev attendu={prev_exp} ‚Äì prev trouv√©={prev_found}"
                )

            generate_report_sha256(filename, lines, "integrite_worm")
    return False if need_new_report else True


        
# üóëÔ∏è Suppression √©l√®ve RGPD

def anonymiser_logs_student(engine_log, student_id):
    """
    Anonymise tous les logs de chat_logs li√©s √† un √©l√®ve (RGPD - WORM safe).

    Moteur utilis√© : engine_log (r√¥le app_log avec UPDATE(user_id)).
    """
    with engine_log.begin() as conn:
        result = conn.execute(
            text("""
                UPDATE chat_logs
                SET user_id = 'ANONYMISED'
                WHERE user_id = :sid
            """), {"sid": student_id}
        )
    return result.rowcount  # nombre de lignes anonymis√©es


def delete_student_record(engine, student_id):
    """
    Supprime un √©l√®ve de la base students.

    Moteur utilis√© : engine (r√¥le principal).
    """
    with engine.begin() as conn:
        result = conn.execute(
            text("""
                DELETE FROM students
                WHERE student_id = :sid
            """), {"sid": student_id}
        )
    return result.rowcount

    
def delete_student(engine, engine_log,student_id):
    """
    Supprime l'√©l√®ve et ses donn√©es associ√©es pour respect du RGPD.

    - Anonymise les logs li√©s dans chat_logs.
    - Supprime l'entr√©e correspondante dans students.
    - G√©n√®re un rapport scell√© SHA256 dans /audit_reports/Deleted_students/

    Param√®tres :
    - engine : moteur principal (exercices, students)
    - engine_log : moteur logs s√©curis√© (chat_logs)
    - student_id : identifiant de l'√©l√®ve
    """

    try:

        # Anonymiser les logs

        # üõ°Ô∏è RGPD x WORM : anonymisation au lieu de suppression des logs
        #
        # Lors de la suppression d'un √©l√®ve, nous ne supprimons pas les anciens logs de chat_logs
        # afin de respecter le principe WORM (Write Once, Read Many) : aucun effacement, aucune alt√©ration historique.
        #
        # Pour respecter le RGPD (droit √† l'effacement), nous anonymisons le champ user_id
        # en le passant √† 'ANONYMISED' . Cela coupe tout lien identifiable entre l'√©l√®ve et ses anciens messages,
        # tout en maintenant l'int√©grit√© de la cha√Æne prev_hash / this_hash.
        #
        # Ce choix garantit :
        # - La conformit√© RGPD (plus de donn√©es personnelles stock√©es apr√®s suppression de l'√©l√®ve)
        # - Le respect de la continuit√© WORM (pas de rupture du cha√Ænage historique)
        #
        # Remarque : aucune modification n'est faite sur les champs utilis√©s pour calculer les hash,
        # donc l'int√©grit√© du scellage est strictement pr√©serv√©e.


        nb_anonymised = anonymiser_logs_student(engine_log, student_id)
        nb_deleted = delete_student_record(engine, student_id)
            
        now = datetime.now(timezone.utc)
        now_str = now.strftime("%Y-%m-%d_%H-%M-%S")
        
        filename = f"rapport_delete_{student_id}_{now_str}.txt"

        lines = [
            f"Date de suppression : {now.strftime('%Y-%m-%d %H:%M UTC')}",
            f"√âl√®ve : {student_id}",
            f"Nombre de logs anonymis√©s : {nb_anonymised}",
            f"Suppression de la fiche √©l√®ve : {'Oui' if nb_deleted > 0 else 'Non (inexistant)'}"
        ]
        # G√©n√©rer le rapport scell√© SHA256
        generate_report_sha256(filename, lines, "Deleted_students")
        
        if nb_deleted > 0:
            flash(f"‚úÖ √âl√®ve {student_id} supprim√© avec succ√®s. {nb_anonymised} logs anonymis√©s.", "success")
        else:
            flash(f"‚ùå Aucun √©l√®ve trouv√© avec cet identifiant.", "error")

    except Exception as e:
        print(e)
        flash(f"‚ùå Erreur lors de la suppression de l'√©l√®ve : {e}", "error")

    return redirect(url_for('dashboard_rgpd'))

# üì• Export dernier WORM
def export_worm(engine):
    """
    D√©clenche l'export des logs WORM des 7 derniers jours sous forme d'archive s√©curis√©e (.zip).

    Fonctionnement :
    - V√©rifie que l'utilisateur est connect√© en tant qu'administrateur.
    - Appelle la fonction `export_worm(engine)` (d√©finie dans rgpd.py).
    - G√©n√®re automatiquement :
        - Un fichier CSV des logs r√©cents (7 jours).
        - Un fichier SHA256 associ√© pour v√©rification d'int√©grit√©.
        - Un fichier ZIP regroupant les deux fichiers pr√©c√©dents.
    - Ins√®re un enregistrement dans la table `worm_exports` (historique des exports WORM).
    - Envoie un message flash pour informer du succ√®s ou de l'√©chec de l'op√©ration.

    S√©curit√© :
    - L'acc√®s est prot√©g√© par `@login_required_admin` pour √©viter toute exportation non autoris√©e.

    Retour :
    - Redirige l'administrateur vers le tableau de bord RGPD apr√®s l'export.

    Utilit√© :
    - Permet d'assurer la conservation √† moyen terme des logs dans un format conforme RGPD (WORM : Write Once, Read Many).
    - Facilite les contr√¥les et audits en cr√©ant des archives cha√Æn√©es et v√©rifiables.

    Remarques :
    - Seuls les √©changes des 7 derniers jours sont inclus dans chaque export (param√®tre configurable via WORM_EXPORT_DAYS).
    - Les fichiers sont stock√©s dans le dossier `/export/worm/` du serveur.
    """
    try:
        now = datetime.now(timezone.utc).date()
        timestamp = now.strftime("%Y-%m-%d_%H-%M-%S")
        csv_file = f"chatlogs_worm_{timestamp}.csv"
        sha_file = csv_file + ".sha256"
        zip_file = f"chatlogs_worm_{timestamp}.zip"

        csv_path = os.path.join(worm_dir, csv_file)
        sha_path = os.path.join(worm_dir, sha_file)
        zip_path = os.path.join(worm_dir, zip_file)
        
        interval_days = f"{WORM_EXPORT_DAYS} days"
        
        query = text(f"""
        SELECT id, ts, user_id, prompt, completion, flags, model, prev_hash, this_hash
        FROM chat_logs
        WHERE ts >= (now() - interval '{interval_days}')
        ORDER BY ts ASC
        """)

        

        with engine.connect() as conn, open(csv_path, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["id", "ts", "user_id", "prompt", "completion", "flags", "model", "prev_hash", "this_hash"])
            rows = list(conn.execute(query))
            for row in rows:
                writer.writerow(row)

        # SHA256
        with open(csv_path, "rb") as f:
            sha256 = hashlib.sha256(f.read()).hexdigest()
        with open(sha_path, "w") as f:
            f.write(f"{sha256}  {csv_file}\n")

        # ZIP
        with ZipFile(zip_path, "w") as z:
            z.write(csv_path, arcname=csv_file)
            z.write(sha_path, arcname=sha_file)

        # Ins√©rer dans worm_exports avec filename
        with engine.begin() as cn:
            cn.execute(text("""
                INSERT INTO worm_exports (nb_logs, size_bytes, filename)
                VALUES (:nb, :sz, :fn)
            """), {
                "nb": len(rows),
                "sz": os.path.getsize(zip_path),
                "fn": zip_file
            })
        print("ok")
        flash(f"‚úÖ Export WORM r√©ussi : {len(rows)} logs export√©s.", "success")
    except Exception as e:
        flash(f"‚ùå Erreur lors de l'export WORM : {e}", "error")
        print("error")

    return redirect(url_for('dashboard_rgpd'))


# üì• T√©l√©charger dernier WORM

def download_latest_worm():
    """
    Permet de t√©l√©charger le dernier fichier WORM g√©n√©r√© (archive ZIP).

    - V√©rifie que l'utilisateur est connect√© en tant qu'administrateur.
    - V√©rifie que le fichier ZIP existe et contient au moins un fichier valide.
    - Si le fichier est valide, le propose en t√©l√©chargement.
    - Sinon, affiche un message flash d'erreur appropri√©.
    - Redirige vers le dashboard RGPD en cas d'erreur.

    M√©thode prot√©g√©e par la session admin.
    """
    worm_files = [f for f in os.listdir(worm_dir) if f.startswith("chatlogs_worm_") and f.endswith(".zip")]

    if not worm_files:
        flash(f"‚ùå Aucun fichier WORM disponible.", "error")
        return redirect(url_for('dashboard_rgpd'))

    worm_files = sorted(worm_files, key=lambda x: os.path.getmtime(os.path.join(worm_dir, x)), reverse=True)
    filename = worm_files[0]
    file_path = os.path.join(worm_dir, filename)


    # V√©rification 1 : fichier existe
    if not os.path.isfile(file_path):
        flash(f"‚ùå Aucun fichier WORM trouv√© pour aujourd'hui ({filename}).", "error")
        return redirect(url_for('dashboard_rgpd'))

    # V√©rification 2 : fichier lisible et non vide structurellement
    try:
        with ZipFile(file_path, 'r') as zipf:
            if len(zipf.namelist()) == 0:
                flash(f"‚ùå Le fichier WORM est vide ou corrompu ({filename}).", "error")
                return redirect(url_for('dashboard_rgpd'))
    except Exception as e:
        flash(f"‚ùå Erreur lors de l'ouverture du fichier ZIP : {e}", "error")
        return redirect(url_for('dashboard_rgpd'))

    # OK -> T√©l√©chargement
    return send_from_directory(worm_dir, filename, as_attachment=True)

# üì• T√©l√©charger un WORM sp√©cifique

def download_worm(filename):
    """
    Permet de t√©l√©charger un fichier WORM historique sp√©cifique.

    - V√©rifie que l'utilisateur est connect√© en tant qu'administrateur.
    - Cherche le fichier ZIP dans le dossier 'export/worm'.
    - Si le fichier existe, l'envoie en t√©l√©chargement au client.
    - Si le fichier est introuvable, affiche un message flash d'erreur et redirige vers le dashboard RGPD.

    Cette route s√©curise l'acc√®s aux fichiers archiv√©s WORM par leur nom unique.
    """

    file_path = os.path.join(worm_dir, filename)

    if not os.path.isfile(file_path):
        flash(f"‚ùå Fichier {filename} introuvable.", "error")
        return redirect(url_for('dashboard_rgpd'))

    try:
        with ZipFile(file_path, 'r') as zipf:
            if len(zipf.namelist()) == 0:
                flash(f"‚ùå Le fichier WORM est vide ou corrompu ({filename}).", "error")
                return redirect(url_for('dashboard_rgpd'))
    except Exception as e:
        flash(f"‚ùå Erreur lors de l'ouverture du fichier ZIP ({filename}) : {e}", "error")
        return redirect(url_for('dashboard_rgpd'))

    return send_from_directory(worm_dir, filename, as_attachment=True)


# üì§ Export flags graves

def export_flags_graves(engine):
    """
    Exporte les √©changes d√©tect√©s comme critiques (self-harm) en fichier CSV.

    - S√©lectionne tous les logs de la table `chat_logs`
      o√π un probl√®me de type `self-harm` ou `self-harm/intent` a √©t√© d√©tect√©.
    - G√©n√®re un fichier CSV avec les colonnes :
      Date de l'√©change, Identifiant de l'√©l√®ve, Prompt envoy√©, Probl√®mes d√©tect√©s.
    - Renvoie le fichier en t√©l√©chargement direct avec le nom `flags_graves.csv`.
    - Enregistre un rapport scell√© sha 256 stock√© dans /audit_reports/moderations/
    
    S√©curit√© :
    - Route prot√©g√©e par @login_required_admin pour √©viter tout acc√®s non autoris√©.

    Utilit√© :
    - Permet au responsable de la plateforme de conserver une trace
      des incidents critiques d√©tect√©s pour audit ou suivi RGPD.
    """

    with engine.connect() as cn:
        results = cn.execute(text("""
            SELECT ts, user_id, prompt, flags
            FROM chat_logs
            WHERE (flags->>'self-harm' = 'true' OR flags->>'self-harm/intent' = 'true')
            ORDER BY ts DESC
        """)).mappings().all()

    si = StringIO()
    writer = csv.writer(si)
    writer.writerow(["Date", "√âl√®ve", "Prompt", "Flags d√©tect√©s"])
    for record in results:
        writer.writerow([
            record['ts'].strftime('%d/%m/%Y %H:%M'),
            record['user_id'],
            record['prompt'],
            ', '.join([k for k, v in (record['flags'] or {}).items() if v])
        ])
        
        
    now = datetime.now(timezone.utc)
    now_str = now.strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"rapport_flags_graves_{now_str}.txt"

    lines = [
        f"Date de g√©n√©ration : {now.strftime('%Y-%m-%d %H:%M UTC')}",
        f"Nombre d'incidents critiques d√©tect√©s : {len(results)}"
    ]

    generate_report_sha256(filename, lines, "moderations")
    output = si.getvalue()
    return Response(
        output,
        mimetype="text/csv",
        headers={"Content-Disposition": "attachment; filename=flags_graves.csv"}
    )

# üßπ Purge des vieux logs
def purge_old_logs(engine):
    """    
    Purge partielle des donn√©es RGPD :

    - Anonymise les anciens logs de chat_logs (> PURGE_DAYS).
    - Supprime les r√©ponses donn√©es par les √©l√®ves dans attempts (> PURGE_DAYS).
    - Ne supprime rien de WORM (respect de l'int√©grit√© cha√Æn√©e).
    - G√©n√®re un rapport SHA256 dans /audit_reports/purges/
    """
    try:
        now = datetime.now(timezone.utc)

        with engine.begin() as conn:
            # ‚úÖ Anonymiser user_id des vieux logs WORM (> PURGE_DAYS)
            anonymized_logs = conn.execute(text(f"""
                UPDATE chat_logs
                SET user_id = 'ANONYMISED'
                WHERE ts < now() - interval '{PURGE_DAYS} days'
                AND user_id IS NOT NULL
            """))

            # ‚úÖ Anonymiser les r√©ponses dans attempts
            cleared = conn.execute(text(f"""
                UPDATE attempts
                SET given_answer = NULL
                WHERE ended_at < now() - interval '{PURGE_DAYS} days'
            """))

            # ‚úÖ Enregistrer dans logs_purges
            conn.execute(text("""
                INSERT INTO logs_purges (nb_logs_deleted, nb_attempts_anonymized)
                VALUES (:logs, :ans)
            """), {
                "logs": anonymized_logs.rowcount,
                "ans": cleared.rowcount
            })

        now_str = now.strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"rapport_purge_{now_str}.txt"

        lines = [
            f"Date de la purge : {now.strftime('%Y-%m-%d %H:%M UTC')}",
            f"Nombre de logs anonymis√©s : {anonymized_logs.rowcount}",
            f"Nombre d'attempts anonymis√©s : {cleared.rowcount}"
        ]

        generate_report_sha256(filename, lines, "purges")        

        flash(f"‚úÖ Purge termin√©e : {anonymized_logs.rowcount} logs anonymis√©s, {cleared.rowcount} r√©ponses anonymis√©es.", "success")

    except Exception as e:
        flash(f"‚ùå Erreur lors de la purge : {e}", "error")

    return redirect(url_for('dashboard_rgpd'))

# üßπ Purge des vieux logs
def purge_old_logsv2(engine):
    """
    Purge les anciennes donn√©es de la base de donn√©es.

    - V√©rifie que l'utilisateur est connect√© en tant qu'administrateur.
    - Supprime les logs de chat datant de plus de PURGE_DAYS jours.
    - Anonymise √©galement les r√©ponses des tentatives d'exercices vieilles de plus de PURGE_DAYS jours.
    - Enregistre un rapport scell√© sha 256 stock√© dans /audit_reports/purges/
    - Affiche un message flash indiquant le nombre de suppressions/anonymisations effectu√©es.
    - Redirige ensuite vers le dashboard RGPD.

    M√©thode prot√©g√©e par la session admin.
    """
    try:
        now = datetime.now(timezone.utc)

        with engine.begin() as conn:
            deleted_logs = conn.execute(text(f"""
                DELETE FROM chat_logs
                WHERE ts < now() - interval '{PURGE_DAYS} days'
            """))

            cleared = conn.execute(text(f"""
                UPDATE attempts
                SET given_answer = NULL
                WHERE ended_at < now() - interval '{PURGE_DAYS} days'
            """))

            # Enregistrement dans logs_purges
            conn.execute(text("""
                INSERT INTO logs_purges (nb_logs_deleted, nb_attempts_anonymized)
                VALUES (:logs, :ans)
            """), {"logs": deleted_logs.rowcount, "ans": cleared.rowcount})

        now_str = now.strftime("%Y-%m-%d_%H-%M-%S")
        
        filename = f"rapport_purge_{now_str}.txt"

        lines = [
            f"Date de la purge : {now.strftime('%Y-%m-%d %H:%M UTC')}",
            f"Nombre de logs supprim√©s : {deleted_logs.rowcount}",
            f"Nombre d'attempts anonymis√©s : {cleared.rowcount}"
        ]

        generate_report_sha256(filename, lines, "purges")        
        
        flash(f"‚úÖ Purge termin√©e : {deleted_logs.rowcount} logs supprim√©s, {cleared.rowcount} r√©ponses anonymis√©es.", "success")
    except Exception as e:
        flash(f"‚ùå Erreur lors de la purge : {e}", "error")

    return redirect(url_for('dashboard_rgpd'))




# üì§ Export audits

def prepare_audit(engine):
    """
    G√©n√®re et t√©l√©charge un pack complet d'audit RGPD sous forme d'un fichier ZIP.

    Contenu du pack :
    - Dernier fichier WORM export√© (chatlogs_worm_DATE.zip)
    - Fichier CSV listant tous les incidents critiques (self-harm) d√©tect√©s
    - Fichier texte contenant la date de derni√®re purge RGPD et la date de g√©n√©ration du pack

    Fonctionnement :
    - G√©n√®re tout √† la demande au moment du clic.
    - Cr√©e l'archive ZIP en m√©moire (pas de fichier temporaire sur le serveur).
    - Prot√©g√© par @login_required_admin pour s√©curiser l'acc√®s.
    - Le pack est envoy√© imm√©diatement en t√©l√©chargement.

    Objectif :
    - Permettre un export complet et pr√™t √† pr√©senter pour audit RGPD ou inspection.

    S√©curit√© :
    - Aucun fichier persistant n'est stock√© sur le serveur apr√®s t√©l√©chargement.
    - Toujours bas√© sur les donn√©es les plus r√©centes disponibles.

    Retour :
    - Fichier ZIP nomm√© 'audit_pack_YYYY-MM-DD_HHMM.zip'
    """
    now = datetime.now(timezone.utc).strftime("%Y-%m-%d_%H%M")
    zip_filename = f"audit_pack_{now}.zip"

    memory_file = BytesIO()

    if not os.path.exists(worm_dir):
        flash("‚ùå Aucun dossier d'exports WORM trouv√©.", "error")
        return redirect(url_for('dashboard_rgpd'))

    worm_files = [f for f in os.listdir(worm_dir) if f.startswith("chatlogs_worm_") and f.endswith(".zip")]
    if not worm_files:
        flash("‚ùå Aucun fichier WORM disponible pour g√©n√©rer l'audit.", "error")
        return redirect(url_for('dashboard_rgpd'))

    with ZipFile(memory_file, 'w', ZIP_DEFLATED) as zipf:
        # Ajouter le dernier fichier WORM
        worm_files = sorted(worm_files, key=lambda x: os.path.getmtime(os.path.join(worm_dir, x)), reverse=True)
        latest_worm = worm_files[0]
        zipf.write(os.path.join(worm_dir, latest_worm), arcname=latest_worm)

        # G√©n√©rer flags_graves.csv
        with engine.connect() as cn:
            results = cn.execute(text("""
                SELECT ts, user_id, prompt, flags
                FROM chat_logs
                WHERE (flags->>'self-harm' = 'true' OR flags->>'self-harm/intent' = 'true')
                ORDER BY ts DESC
            """)).mappings().all()

        si = StringIO()
        writer = csv.writer(si)
        writer.writerow(["Date", "√âl√®ve", "Prompt", "Probl√®mes d√©tect√©s"])
        for record in results:
            detected_flags = [k for k, v in (record['flags'] or {}).items() if v]
            writer.writerow([
                record['ts'].strftime('%d/%m/%Y %H:%M'),
                record['user_id'],
                record['prompt'],
                ", ".join(detected_flags)
            ])
        content = si.getvalue()
        zipf.writestr("flags_graves.csv", content)

        # üî• Nouveau ‚ûî V√©rifier si seulement l'en-t√™te
        nb_lignes = content.count('\n')
        if nb_lignes <= 1:
            flash("‚úÖ Aucun incident grave d√©tect√© (aucun flag self-harm trouv√©).", "info")

        # Ajouter audit_purge_info.txt
        with engine.connect() as cn:
            last_purge = cn.execute(text("""
                SELECT purge_date
                FROM logs_purges
                ORDER BY purge_date DESC
                LIMIT 1
            """)).scalar()
        if not last_purge:
            flash("‚ö†Ô∏è Attention : aucune purge RGPD n'a encore √©t√© r√©alis√©e.", "warning")
        purge_info = "Aucune purge trouv√©e." if not last_purge else f"Derni√®re purge RGPD effectu√©e le {last_purge.strftime('%d/%m/%Y √† %H:%M')}."
        purge_info += f"\nPack g√©n√©r√© le {datetime.now(timezone.utc).strftime('%d/%m/%Y √† %H:%M')}."
        zipf.writestr("audit_purge_info.txt", purge_info)

    memory_file.seek(0)
    
    # üî• NOUVEAU : Enregistrer une copie du pack dans /export/audit_packs/
    audit_pack_path = os.path.join(audit_packs_dir, zip_filename)
    with open(audit_pack_path, "wb") as f:
        f.write(memory_file.getbuffer())
    
    # ‚úÖ Tu pourrais m√™me g√©n√©rer un .sha256 √† c√¥t√© si tu veux...
    generate_sha256(audit_pack_path)

    flash("‚úÖ Audit RGPD g√©n√©r√© avec succ√®s.", "success")

    return send_file(
        memory_file,
        mimetype='application/zip',
        as_attachment=True,
        download_name=zip_filename
    )
